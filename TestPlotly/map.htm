<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
    <meta charset="utf-8" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

    <meta http-equiv="cache-control" content="max-age=0" />
    <meta http-equiv="cache-control" content="no-cache" />
    <meta http-equiv="expires" content="0" />
    <meta http-equiv="expires" content="Tue, 01 Jan 1980 1:00:00 GMT" />
    <meta http-equiv="pragma" content="no-cache" />
    

    <title>WikiMaps test</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.00, minimum-scale=1.00, maximum-scale=1.00" />

    <style type="text/css">
        *
        {
            cursor: default !important;
        }

        html, body
        {
            margin: 0px;
            padding: 0px;
            width: 100%;
            height: 100%;
        }

        #swissMap
        {
            position: absolute;
            top: 55px;
            left: 0px;
            right: 0px;
            bottom: 0px;
        }


        #zoom-level
        {
            display: none;
            position: absolute;
            margin: 0px;
            padding: 10px;
            top: 0;
            left: 0;
            z-index: 1000;
            background: white;
            opacity: 0.85;
            width: 3cm;
        }


        .leaflet-tooltip-top
        {
            margin-top: -19px !important;
        }

        .leaflet-control-attribution
        {
            display: block;
            #transform: scale(0.9, 0.9) translate(5%, 10%);
            transform: scale(0.5, 0.5) translate(50%, 50%);
            position: absolute;
            right: 0px;
            bottom: 0px;
        }

        .leaflet-interactive
        {
            cursor: pointer !important;
        }
        
        
        .leg
        {
            width: 0.5cm;
            height: 0.5cm;
            opacity: 1;
        }

        .legende
        {
            position: absolute;
            display: block;
            top: 85px;
            right: 30px;
            z-index: 999;
            padding: 0.25cm;
            font: 12px/1.5 "Helvetica Neue", Arial, Helvetica, sans-serif;
            background-color: white;
            opacity: 0.85;
            border-radius: 3mm;
        }

        .cont
        {
            padding-left: 0.25cm;
            font: 12px/1.5 "Helvetica Neue", Arial, Helvetica, sans-serif;
        }

        .zoomControl
        {
            position: absolute;
            display: block;
            top: 85px;
            left: 30px;
            z-index: 9999;
            background-color: white;
            opacity: 0.85;
            border: 1px solid gray;
            border-radius: 5mm;
            -webkit-touch-callout: none;
            -webkit-user-select: none;
            -khtml-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
        }

            .zoomControl .mp
            {
                display: table-cell;
                width: 1cm;
                height: 1cm;
                text-align: center;
                vertical-align: middle;
                #font: 5mm/1.5 Arial, Helvetica, sans-serif;
                font-family: "Lucida Console", Monaco, monospace;
                font-size: 5mm;
                color: gray;
            }

                .zoomControl .mp:hover
                {
                    background-color: #F0F0F0;
                }
    </style>

    <!--
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.2.0/dist/leaflet.css"
    integrity="sha512-M2wvCLH6DSRazYeZRIm1JnYyh22purTM+FDB5CsyxtQJYeKq83arPe5wgbNmcFXGqiSH2XR8dT/fJISVA1r/zQ=="
    crossorigin=""/>

    <script src="https://unpkg.com/leaflet@1.2.0/dist/leaflet.js"
    integrity="sha512-lInM/apFSqyy1o6s89K4iQUKg6ppXEgsVxT35HbzUupEVRh2Eu9Wdl4tHj7dZO0s1uvplcYGmt3498TtHq+log=="
    crossorigin=""></script>
    -->
    <!--<link rel="shortcut icon" type="image/png" href="favicon.png" />-->
    <link rel="shortcut icon" type="image/x-icon" href="favicon.ico" />

    <script type="text/javascript" src="Scripts/ea/EasyAjax.js" charset="utf-8"></script>
    <!--
    <link href="Scripts/leaflet/leaflet.css" rel="stylesheet" type="text/css" />
    <script type="text/javascript" src="Scripts/leaflet/leaflet.js?v=1" charset="utf-8"></script>
    -->
    <!--
    <link href="Scripts/leaflet/leaflet_embed.css" rel="stylesheet" type="text/css" />
    -->
    <link href="Scripts/leaflet/leaflet.css" rel="stylesheet" type="text/css" />
    <script type="text/javascript" src="Scripts/leaflet/leaflet-src.js?v=4" charset="utf-8"></script>


    <!-- These are only required for google-maps -->
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDNql8UoaZ_AKjgbktAbdLBuR57WUIVSyI" async defer></script>
    <!--
    <script src="http://maps.google.com/maps/api/js?v=3.2&sensor=false"></script>
    -->
    <script type="text/javascript" src="Scripts/leaflet/leaflet-google.js?v=1" charset="utf-8"></script>
</head>
<body>
    <div id="zoom-level">Zoom Level: 18</div>


    <div class="zoomControl">
        <div class="mp" style="border-top-left-radius: 5mm; border-top-right-radius: 5mm;" onclick="map.zoomHome()">&#x2606;</div><div style="clear: both;"></div>
        <div class="mp" onclick="map.zoomIn()">+</div><div style="clear: both;"></div>
        <div class="mp" style="border-bottom-left-radius: 5mm; border-bottom-right-radius: 5mm;" onclick="map.zoomOut()">-</div><div style="clear: both;"></div>
    </div>


    <div class="legende">
        <table>
            <tr>
                <td class="leg" style="background-color: #FF0000;"></td>
                <td class="cont">Hauptsitz</td>
            </tr>
            <tr>
                <td class="leg" style="background-color: #FF7F00;"></td>
                <td class="cont">Generalagentur</td>
            </tr>
            <tr>
                <td class="leg" style="background-color: #007FFF;"></td>
                <td class="cont">Hauptagentur</td>
            </tr>
            <tr>
                <td class="leg" style="background-color: #00FF00;"></td>
                <td class="cont">Agentur</td>
            </tr>
            <tr>
                <td class="leg" style="background-color: #00FFFF;"></td>
                <td class="cont">Hubs</td>
            </tr>
            <tr>
                <td class="leg" style="background-color: #FFFF00;"></td>
                <td class="cont">Spezial</td>
            </tr>
        </table>
    </div>

    <div id="swissMap"></div>

    <script type="text/javascript">
        var map = null;
        var polygons = [];
        var markers = [];

        Math.trunc = Math.trunc || function (x)
        {
            var n = x - x % 1;
            return n === 0 && (x < 0 || (x === 0 && (1 / x !== 1 / 0))) ? -0 : n;
        };

        Math.radians = function (degrees)
        {
            return degrees * Math.PI / 180.0;
        };


        function SetDefaultVariables(url)
        {
            if (window.parent.Settings)
            {
                url = url.replace("{@basic}", window.parent.Settings.basicLink);
            }

            if (window.top && window.top.Portal && window.top.Portal.Session && window.top.Portal.Session.ID)
            {
                url = url.replace("{@BE_Hash}", window.top.Portal.Session.ID());
            }
            else
                url = url.replace("{@BE_Hash}", "200CEB26807D6BF99FD6F4F0D1CA54D4");

            return url;
        }


        // https://gis.stackexchange.com/a/816/3997
        // https://jsfiddle.net/xwaocc00/
        function polygonArea(poly2)
        {
            var poly = JSON.parse(JSON.stringify(poly2));
            var p1, p2, i;
            var area = 0.0;
            var len = poly.length;

            if (len > 2)
            {

                for (i = 0; i < len; i++)
                {
                    poly[i] = poly[i].map(Math.radians)
                }

                for (i = 0; i < len - 1; i++)
                {
                    p1 = poly[i];
                    p2 = poly[i + 1];

                    area += (p2[0] - p1[0]) *
                        (
                            2
                            + Math.sin(p1[1])
                            + Math.sin(p2[1])
                        );
                }

                // https://en.wikipedia.org/wiki/Earth_radius#Equatorial_radius
                // https://en.wikipedia.org/wiki/Earth_ellipsoid
                // The radius you are using, 6378137.0 m corresponds to the equatorial radius of the Earth.
                var equatorial_radius = 6378137; // m
                var polar_radius = 6356752.3142; // m
                var mean_radius = 6371008.8; // m
                var authalic_radius = 6371007.2; // m (radius of perfect sphere with same surface as reference ellipsoid)
                var volumetric_radius = 6371000.8 // m (radius of a sphere of volume equal to the ellipsoid)

                var radius = mean_radius;

                area = area * radius * radius / 2.0;
            } // End if len > 0

            // equatorial_radius: 6391.565558418869 m2
            // mean_radius:       6377.287126172337m2
            // authalic_radius:   6377.283923019292 m2
            // volumetric_radius: 6377.271110415153 m2
            // merid_radius:      6375.314923754325 m2
            // polar_radius:      6348.777989748668 m2
            // R:                 6368.48180842528 m2
            // hrad:              6391.171919886588 m2

            // http://postgis.net/docs/doxygen/2.2/dc/d52/geography__measurement_8c_a1a7c48d59bcf4ed56522ab26c142f61d.html
            // ST_Area(g)               5.21556075001092E-07
            // ST_Area(g, false)     6379.25032051953
            // ST_Area(g, true)      6350.65051177517

            // return area;
            // return area.toFixed(2);
            return Math.abs(area).toFixed(0);
        }


        function latLongToString(latlng)
        {
            var x = latlng.lat;
            var y = latlng.lng;

            var prefix1 = x < 0 ? "S" : "N";
            var prefix2 = y < 0 ? "W" : "E";

            x = Math.abs(x);
            y = Math.abs(y);

            var grad1 = Math.trunc(x);
            x = (x - grad1) * 60;
            var grad2 = Math.trunc(y);
            y = (y - grad2) * 60;

            var min1 = Math.trunc(x);
            var min2 = Math.trunc(y);

            var sec1 = ((x - min1) * 60).toFixed(1);
            var sec2 = ((y - min2) * 60).toFixed(1);

            min1 = (min1 < 10 ? "0" : "") + min1;
            min2 = (min2 < 10 ? "0" : "") + min2;

            sec1 = (sec1 < 10 ? "0" : "") + sec1;
            sec2 = (sec2 < 10 ? "0" : "") + sec2;

            var res = grad1 + "°" + min1 + "'" + sec1 + '"' + prefix1 + " " + grad2 + "°" + min2 + "'" + sec2 + '"' + prefix2;
            return res;
        }


        function numberWithCommas(x)
        {
            return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, "'");
        }




        function loadMarkers()
        {
            var markerUrl = "../ajax/AnySelect.ashx?sql=FMS_Maps_Marker_GB.sql&BE_ID={@BE_Hash}";
            markerUrl = SetDefaultVariables(markerUrl);

            new Http.Json(markerUrl, null)
                .success(
                function (result)
                {
                    // console.log("onSuccess");

                    var table = result.tables[0];
                    // console.log(table.columns);
                    // console.log(table.columns["OBJ_Label"].index);

                    var index_uid = table.columns["OBJ_UID"].index;
                    var index_code = table.columns["OBJT_Code"].index;
                    var index_label = table.columns["OBJ_Label"].index;
                    var index_latitude = table.columns["OBJ_Lat"].index;
                    var index_longitude = table.columns["OBJ_Long"].index;
                    var index_category = table.columns["OBJ_Kategorie"].index;
                    var index_color = table.columns["OBJ_Color"].index;
                    var index_poly = table.columns["OBJ_Polygon"].index;



                    var allCoords = [];


                    // Singapur
                    // table.rows.push(["uid", "code", "label", 1.345733633103394 , 103.83649706840517, null ]);


                    for (var i = 0; i < table.rows.length; ++i)
                    {
                        var uid = table.rows[i][index_uid];
                        var code = table.rows[i][index_code];
                        var label = table.rows[i][index_label];
                        var latitude = table.rows[i][index_latitude];
                        var longitude = table.rows[i][index_longitude];
                        var category = table.rows[i][index_category];
                        var color = table.rows[i][index_color];
                        var poly = table.rows[i][index_poly];


                        // console.log(uid);
                        // console.log(code);
                        // console.log(label);
                        // console.log(latitude);
                        // console.log(longitude);
                        // console.log(poly);


                        if (label == null)
                            label = "";

                        label = label.replace(/(?:\r\n|\r|\n)/g, '<br />');
                        // console.log(label);

                        if (poly != null)
                            poly = poly.split(',').map(function (x) { return x.split(' ') });

                        if (latitude == null || longitude == null)
                            continue;



                        allCoords.push([latitude, longitude]);
                        var latlng = L.latLng(latitude, longitude);


                        //var markerHtmlStyles = "background-color: #583470;\n  width: 16px;\n  height: 16px;\n  display: block;\n  left: -8px;\n  top: -8px;\n  position: relative;\n  border-radius: 16px 16px 0;\n transform: rotate(45deg); \n  border: 1px solid #FFFFFF";
                        var markerHtmlStyles = "background-color: #583470;\n  width: 16px;\n  height: 16px;\n  display: block;\n  left: -8px;\n  top: -8px;\n  position: relative;\n  border-radius: 16px 16px 0;\n transform: rotate(45deg); \n  border: 1px solid #FFFFFF";
                        var markerHtmlStyles = "display: block; margin-left: -15px; margin-top: -15px; width: 0; \n  height: 0; \n  border-left: 20px solid transparent;\n  border-right: 20px solid transparent;\n  \n  border-top: 20px solid #f00;\n  ";



                        var greenIcon = L.divIcon({
                            className: "MapElement",
                            // iconAnchor: [0, 24],
                            // labelAnchor: [-6, 0],
                            // popupAnchor: [0, -36],
                            html: "<span style=\"" + markerHtmlStyles + "\" />"
                        });


                        var options = {
                            iconUrl: 'marker-icon.png',
                            iconRetinaUrl: 'marker-icon-2x.png',
                            shadowUrl: 'marker-shadow.png',
                            iconSize: [25, 411],
                            iconAnchor: [12, 41],
                            popupAnchor: [1, -120],
                            tooltipAnchor: [16, -228],
                            shadowSize: [41, 41]
                        };


                        var houseImage = "<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:svg=\"http://www.w3.org/2000/svg\" xml:space=\"preserve\"\n   viewBox=\"0 0 512 512\" width=\"22px\" height=\"22px\">\n<path\n d=\"M256,69.972L50,275.814h42.507v166.214h326.985V275.814H462L256,69.972z M374.492,397.028  h-73.768v-86.495h-89.451v86.495h-73.768V251.99L256,133.587l118.492,118.402V397.028z\"\n  fill=\"{@col1}\" />\n<path\n fill=\"{@col2}\" opacity=\"0.4\" \n d=\"M 137.505,251.99 256,133.587 374.492,251.989 v 145.039 h -73.768 v -86.495 h -89.451 v 86.495 h -73.768 z\" />\n</svg>";

                        var greenIcon = L.divIcon(
                            {
                                className: "customIcon",
                                iconAnchor: [12, 12],
                                // tooltipAnchor: [1120, 0],
                                // labelAnchor: [1120, 0],
                                popupAnchor: [0, 0],
                                //html: "<img src=\"images/icons/gm_SR.png\" />"
                                //html: "<img src=\"images/icons/GB.png\" />"
                                //html: "<img src=\"../images/leaflet/helvetia23.png\" />"
                                html: houseImage.replace("{@col1}", color).replace("{@col2}", color)
                            }
                        );

                        // var marker = L.marker([latitude, longitude]).addTo(map);
                        var marker = L.marker([latitude, longitude], { icon: greenIcon }).addTo(map);



                        var tt = L.tooltip(
                            {
                                permanent: true,
                                direction: 'top'
                                // direction: 'right'
                                //tooltipAnchor: [1120, 1120]
                                // , _anchor: [0, -110]
                            }
                        )
                            .setContent(label)
                            ;

                        // marker.bindTooltip(tt);
                        

                        var contentString = category + "<br />" + label
                        // + "<br />GPS: " + latLongToString(latlng);
                        // contentString = contentString + "<br />" + "Fl&auml;che: " + numberWithCommas(polygonArea(poly)) + " m<sup>2</sup>&nbsp;&nbsp;(+/-30m<sup>2</sup>)";
                        var popup = new L.Popup()
                            .setLatLng(latlng)
                            .setContent(contentString)
                            //.openOn(map)
                            ;

                        marker
                            .bindPopup(popup)
                            .addTo(map)
                            ;


                        // console.log(uid);
                        marker.on("click", function (uuid, e) // uid is now called uuid
                        {
                            // console.log("onclick");
                            map.setView(e.latlng, 18, { animate: true });
                            if (marker && marker.popup)
                                marker.popup();

                            var ml = window.parent.document.querySelector('#iMenuLeft');
                            if (ml)
                            {
                                // console.clear();
                                // console.log("navto: ", uuid)
                                ingoreThisNavigation = true;
                                ml.contentWindow.Portal.Drawing.navigateTo(uuid, function (r) { return r });
                            }

                        }.bind(this, uid));
                        markers[uid] = marker;



                        /*
                        var circle = L.circle(latlng,
                        {
                        color: 'red'
                        , fillColor: '#f03'
                        , fillOpacity: 0.5
                        , radius: 15
                        }).addTo(map);
                        */

                        var polygon = L.polygon(poly);

                        /*
                        polygon.setStyle({
                        fillColor: '#FF00FF'
                        ,fillOpacity: 0.7
                        ,color: 'white'  //Outline color
                        ,weight: 2
                        ,opacity: 1
                        });
                        */


                        var popupString = "Fl&auml;che: " + numberWithCommas(polygonArea(poly)) + " m<sup>2</sup>";
                        polygon.addTo(map)
                            //.bindPopup(popupString)
                            //.openPopup()
                            ;

                        // polygon.on("dblclick", function (uuid, e)
                        polygon.on("click", function (uuid, e)
                        {
                            var t = "{@basic}gebaeude.aspx?uid={@obj}&muid=@GB&env=ov&ro=false&proc={@BE_Hash}";
                            t = SetDefaultVariables(t);
                            
                            //var ml = window.parent.document.querySelector('#frameDWG');
                            var ml = window.parent.document.querySelector('#frameDWGForm');
                            if (ml) ml.src = t.replace("{@obj", uuid);
                            //if (ml) ml.contentWindow.Portal.Drawing.navigateTo(uuid, function (r) { return r });

                        }.bind(this, uid));
                        polygons[uid] = marker;

                    } // next i

                    var initialBounds = L.latLngBounds(allCoords);

                    map.zoomHome = function (homeView)
                    {
                        map.fitBounds(homeView);
                    }.bind(this, initialBounds);

                    map.zoomHome();

                } // End delegate success
                ).send()
                ;

            // console.log("leaving loadMarkers");
        } // End Function loadMarkers


        function bracketDevicePixelRatio()
        {
            var brackets = [1, 1.3, 1.5, 2, 2.6, 3],
                baseRatio = window.devicePixelRatio || 1;
            for (var i = 0; i < brackets.length; i++)
            {
                var scale = brackets[i];
                if (scale >= baseRatio || (baseRatio - scale) < 0.1)
                {
                    return scale;
                }
            }
            return brackets[brackets.length - 1];
        } // End Function bracketDevicePixelRatio


        var ingoreThisNavigation = false;

        function onBaumClick(a)
        {
            var uid = a.parentElement.id.substr(1);
            var classes = " " + a.parentElement.className.toLowerCase() + " ";
            var target = "";

            if (classes.indexOf(" ld ") != -1) target = "ld";
            if (classes.indexOf(" ort ") != -1) target = "ort";
            if (classes.indexOf(" so ") != -1) target = "so";
            if (classes.indexOf(" gb ") != -1) target = "gb";

            // console.log(classes);
            // console.log(target);
            // console.log(uid);

            if (ingoreThisNavigation)
            {
                if (target == "so")
                    ingoreThisNavigation = false;

                return;
            }


            function zoomIn(uid)
            {
                // console.log("zoomIn", uid);
                var boundsUrl = "../ajax/AnySelect.ashx?sql=FMS_Maps_ObjectBounds.sql&BE_ID={@BE_Hash}&obj_uid=";
                boundsUrl = SetDefaultVariables(boundsUrl);

                new Http.Json(boundsUrl + uid, null)
                    .success(
                    function (result)
                    {
                        // console.log("onSuccess");

                        var table = result.tables[0];
                        // console.log(table.columns);
                        // console.log(table.columns["OBJ_Label"].index);

                        var index_objt = table.columns["OBJT_UID"].index;
                        var index_uid = table.columns["OBJ_UID"].index;

                        var index_latitude = table.columns["OBJ_Lat"].index;
                        var index_longitude = table.columns["OBJ_Lng"].index;

                        var index_minLat = table.columns["OBJ_Min_Lat"].index;
                        var index_minLng = table.columns["OBJ_Min_Long"].index;
                        var index_maxLat = table.columns["OBJ_Max_Lat"].index;
                        var index_maxLng = table.columns["OBJ_Max_Lng"].index;

                        for (var i = 0; i < table.rows.length; ++i)
                        {
                            var code = table.rows[i][index_objt];
                            var uid = table.rows[i][index_uid];
                            var latitude = table.rows[i][index_latitude];
                            var longitude = table.rows[i][index_longitude];


                            var minLat = table.rows[i][index_minLat];
                            var minLng = table.rows[i][index_minLng];
                            var maxLat = table.rows[i][index_maxLat];
                            var maxLng = table.rows[i][index_maxLng];

                            if (minLat != null && minLng != null && maxLat != null && maxLng != null)
                            {
                                var zoomBounds = L.latLngBounds([[minLat, minLng], [maxLat, maxLng]]);
                                map.fitBounds(zoomBounds);
                            }
                            else if (latitude != null && longitude != null)
                            {
                                map.setView([latitude, longitude], 18, { animate: true });
                                // Zoom coordinates
                            }
                        }
                    }
                    ).send();
            }


            switch (target)
            {
                case "ld":
                case "ort":
                case "so":
                    zoomIn(uid);
                    break;
                case "gb":
                    zoomIn(uid);
                    markers[uid].openPopup()
                    break;
                case "eg":
                case "og":
                case "ug":
                    //console.log("Geschoss");
                    break;
                default:
                    console.log("Objekt nicht definiert.");
            }
        }


        // https://stackoverflow.com/questions/1007981/how-to-get-function-parameter-names-values-dynamically
        function getParamNames(func)
        {
            var STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;
            var ARGUMENT_NAMES = /([^\s,]+)/g;

            var fnStr = func.toString().replace(STRIP_COMMENTS, '');
            var result = fnStr.slice(fnStr.indexOf('(') + 1, fnStr.indexOf(')')).match(ARGUMENT_NAMES);
            if (result === null)
                result = [];
            return result;
        }

        // Polyfill for Function#name on browsers that do not support it (IE 11):
        if (!(function f() { }).name)
        {
            Object.defineProperty(Function.prototype, 'name', {
                get: function ()
                {
                    var name = (this.toString().match(/^function\s*([^\s(]+)/) || [])[1];
                    // For better performance only parse once, and then cache the
                    // result through a new accessor for repeated access.
                    Object.defineProperty(this, 'name', { value: name });
                    return name;
                }
            });
        }

        function logParams(args)
        {
            var pn = getParamNames(args.callee)
            var x = [];
            for (var i = 0; i < args.length; ++i)
            {
                if (i >= pn.length)
                    x["arg[" + (i + 1).toString() + "]"] = args[i];
                else
                    x[pn[i]] = args[i];
            }

            function resolveCaller(a)
            {
                if (a == null)
                    return "'window/global'";

                if (a.name != null && a.name != "")
                    return a.name;

                return "'anonymous function' in " + resolveCaller(a.caller);
            }

            console.log(resolveCaller(args.callee), "called with", x);
        }

        var werbetafeln = [];

        function addWerbetafel(lat, lng)
        {
            map.closePopup();
            var url = "../ajax/AnySelect.ashx?sql=FMS_Maps_InsertWerbetafel.sql&BE_ID={@BE_Hash}&lat={@lat}&lng={@lng}";
            url = SetDefaultVariables(url);
            url = url.replace("{@lat}", lat);
            url = url.replace("{@lng}", lng);

            new Http.Json(url, null)
                .success(
                function (result)
                {
                    // console.log("addWerbetafel: success");
                    

                    var table = result.tables[0];
                    console.log(table);

                    var index_uid = table.columns["OBJ_UID"].index;
                    var index_latitude = table.columns["OBJ_Lat"].index;
                    var index_longitude = table.columns["OBJ_Lng"].index;

                    for (var i = 0; i < table.rows.length; ++i)
                    {
                        var uid = table.rows[i][index_uid];
                        var latitude = table.rows[i][index_latitude];
                        var longitude = table.rows[i][index_longitude];

                        if (latitude == null || longitude == null)
                            continue;

                        var greenIcon = L.divIcon(
                            {
                                className: "customIcon",
                                iconAnchor: [12, 12],
                                popupAnchor: [0, 0],
                                html: "<img src=\"../images/leaflet/helvetia23.png\" />"
                            }
                        );

                        // var marker = L.marker([latitude, longitude]).addTo(map);
                        var marker = L.marker([latitude, longitude], { icon: greenIcon }).addTo(map);
                        
                        marker.on("click", function (uuid, e)
                        {
                            var t = "{@basic}anlage.aspx?uid={@obj}&muid=AL&env=ov&ro=false&proc={@BE_Hash}";
                            t = SetDefaultVariables(t);

                            //var ml = window.parent.document.querySelector('#frameDWG');
                            var ml = window.parent.document.querySelector('#frameDWGForm');
                            if (ml) ml.src = t.replace("{@obj", uuid);
                            //if (ml) ml.contentWindow.Portal.Drawing.navigateTo(uuid, function (r) { return r });

                        }.bind(this, uid));
                        werbetafeln.push(marker);

                    }

                }).send();

        }


        function loadWerbetafeln(lat, lng)
        {
            var url = "../ajax/AnySelect.ashx?sql=FMS_Maps_Marker_Werbetafeln.sql&BE_ID={@BE_Hash}";
            url = SetDefaultVariables(url);
            
            new Http.Json(url, null)
                .success(
                function (result)
                {
                    // console.log("loadWerbetafeln: success");

                    var table = result.tables[0];
                    // console.log(table);

                    var index_uid = table.columns["OBJ_UID"].index;
                    var index_latitude = table.columns["OBJ_Lat"].index;
                    var index_longitude = table.columns["OBJ_Lng"].index;

                    for (var i = 0; i < table.rows.length; ++i)
                    {
                        var uid = table.rows[i][index_uid];
                        var latitude = table.rows[i][index_latitude];
                        var longitude = table.rows[i][index_longitude];

                        if (latitude == null || longitude == null)
                            continue;

                        var greenIcon = L.divIcon(
                            {
                                className: "customIcon",
                                iconAnchor: [12, 12],
                                popupAnchor: [0, 0],
                                html: "<img src=\"../images/leaflet/helvetia23.png\" />"
                            }
                        );

                        // var marker = L.marker([latitude, longitude]).addTo(map);
                        var marker = L.marker([latitude, longitude], { icon: greenIcon });

                        if (map.getZoom() > 16)
                        {
                            marker.addTo(map);
                        }

                        marker.on("click", function (uuid, e)
                        {
                            var t = "{@basic}anlage.aspx?uid={@obj}&muid=AL&env=ov&ro=false&proc={@BE_Hash}";
                            t = SetDefaultVariables(t);

                            //var ml = window.parent.document.querySelector('#frameDWG');
                            var ml = window.parent.document.querySelector('#frameDWGForm');
                            if (ml) ml.src = t.replace("{@obj", uuid);
                            //if (ml) ml.contentWindow.Portal.Drawing.navigateTo(uuid, function (r) { return r });

                        }.bind(this, uid));

                        werbetafeln.push(marker);
                    }

                }).send();

        }


        function handleContextOption(command, latLng)
        {
            logParams(arguments);

            var a = latLng.split(' ');
            latLng = { lat: +(a[0]), lng: +(a[1]) };

            switch (command)
            {
                case "addPolygon":
                    console.log("TODO:", command, latLng, "muss noch gemacht werden - hatte keine Zeit :P")
                    break;
                case "werbetafel":
                    addWerbetafel(latLng.lat, latLng.lng);
                    break;
                default:
                    console.log("TODO:", command, latLng)
                    break;
            }

        }


        function onWerbetafelChange()
        {
            for (i = 0; i < werbetafeln.length; ++i)
            {
                werbetafeln[i].remove();
            }

            loadWerbetafeln();
        }


        // https://jsfiddle.net/Lru99de0/1/
        function observeIframe()
        {
            // Blocker is the element that has a changing display value
            var blocker = window.parent.document.querySelector('#frameDWGForm');
            if (blocker == null)
                return;

            var timoutHandle = null;
            var timoutHandle2 = null;

            // Our mutation observer, which we attach to blocker later
            var observer = new MutationObserver(function (mutations)
            {
                mutations.forEach(function (mutation)
                {
                    // console.log("style changed");
                    var cs = window.getComputedStyle(blocker);


                    if (mutation.attributeName === 'style' && cs.getPropertyValue('display') === 'none')
                    {
                        window.clearTimeout(timoutHandle);
                        timoutHandle = window.setTimeout(function ()
                        {
                            // console.log("form-frame again is invisible NOW.");
                            onWerbetafelChange();
                        }, 400);
                    }

                    // Was it the style attribute that changed? (Maybe a classname or other attribute change could do this too? You might want to remove the attribute condition) Is display set to 'none'?
                    if (mutation.attributeName === 'style' && cs.getPropertyValue('display') !== 'none'
                    )
                    {
                        window.clearTimeout(timoutHandle2);
                        timoutHandle2 = window.setTimeout(function ()
                        {
                            // console.log("form-frame is now visible.");
                        }, 400);
                    }
                });
            });

            // Attach the mutation observer to blocker, and only when attribute values change
            observer.observe(blocker, { attributes: true });
        }



        // https://maps.wikimedia.org
        // https://maps.wikimedia.org/main.js
        function initMap()
        {
            observeIframe();
            var ml = window.parent.document.querySelector('#iMenuLeft');
            if (ml) ml.contentWindow.Portal.Drawing._onclick = onBaumClick;

            // Create a map
            map = L.map('swissMap', { zoomControl: false }).setView([47.317390, 8.520293], 18); // SwissRe Soodring 33, Adliswil



            map.zoomHome = function () { };

            // https://jsfiddle.net/BC7q4/444/
            var southWest = new L.LatLng(45.802216, 5.920721);
            var northEast = new L.LatLng(47.968862, 10.769762);
            var bounds = new L.LatLngBounds(southWest, northEast);

            // https://stackoverflow.com/questions/17187161/bounding-view-of-a-leaflet-image-map-to-a-landscape-viewport
            // http://leafletjs.com/reference-1.2.0.html#map-fitbounds
            var bounds = [[45.802216, 5.920721], [47.968862, 10.769762]];
            // map.fitBounds(bounds, { padding: [] });
            map.fitBounds(bounds, null);


            // scale:
            // Optional scale for the high- resolution screens such as Retina.
            // Supported scales are 1.3, 1.5, 2, 2.6, 3
            var scale = bracketDevicePixelRatio();
            var scalex = (scale === 1) ? '' : ('@' + scale + 'x');



            // https://gitlab.com/IvanSanchez/Leaflet.GridLayer.GoogleMutant
            if (L.gridLayer.googleMutant)
            {
                var roads = L.gridLayer.googleMutant({
                    type: 'roadmap' // valid values are 'roadmap', 'satellite', 'terrain' and 'hybrid'
                }).addTo(map);
            }
            


            // Add a map layer
            if(false)
            L.tileLayer("{server}/{style}/{z}/{x}/{y}{scalex}.png",
                {
                    maxZoom: 18
                    , attribution: '<a target="blank" href="https://www.mediawiki.org/wiki/Maps/Technical_Implementation">Wikimedia maps beta</a> | Map data &copy; <a target="blank" href="http://openstreetmap.org/copyright">OpenStreetMap contributors</a>'
                    , server: "https://maps.wikimedia.org"
                    , style: "osm-intl" // "osm" // Map style to use.Use "osm-intl" for map with labels, "osm" for map without labels.
                    , scalex: scalex
                }
            ).addTo(map);
            loadMarkers();
            loadWerbetafeln();






            // Add a km/miles scale
            L.control.scale({ metric: true, imperial: false, maxWidth: 150}).addTo(map);



            // Update the zoom level label
            map.on('zoomend', function ()
            {
                var i;
                document.getElementById('zoom-level').innerHTML = 'Zoom Level: ' + map.getZoom();

                if (map.getZoom() > 16)
                {
                    for (i = 0; i < werbetafeln.length; ++i)
                    {
                        //werbetafeln[i].remove();
                        werbetafeln[i].addTo(map);
                    }
                }
                else
                {
                    for (i = 0; i < werbetafeln.length; ++i)
                    {
                        werbetafeln[i].remove();
                    }
                }

            });


            /*
            var legend = L.control({ position: 'topright' });
            legend.onAdd = function (map)
            {
                var div = L.DomUtil.create('div', 'info legend');
                div.innerHTML = '<select><option>1</option><option>2</option><option>3</option></select>';
                div.firstChild.onmousedown = div.firstChild.ondblclick = L.DomEvent.stopPropagation;
                return div;
            };
            legend.addTo(map);
            */


            //Right click on the map activated
            map.on("contextmenu", function (e)
            {
                function addPosition(latlng)
                {
                    return ' data-position="' + latlng.lat + ' ' + latlng.lng + '" ';
                }

                
                // alert(e.latlng);
                var contextMenu = '';
                contextMenu += '<span style="font-weight: bold;">Hier können Sie</span><br />';
                contextMenu += '<a onclick="handleContextOption(\'werbetafel\', this.getAttribute(\'data-position\'));" ' + addPosition(e.latlng) + '>Werbetafel hinzufügen</a>';
                contextMenu += '<br /><a style="color: gray;" onclick="handleContextOption(\'addPolygon\', this.getAttribute(\'data-position\'));" ' + addPosition(e.latlng) + '>Polygon zuweisen</a>';
                
                var popup = new L.Popup({ closeButton: true, autoClose: true })
                    .setLatLng(e.latlng)
                    .setContent(contextMenu)
                    //.openOn(map)
                    ;

                popup.openOn(map);
            });



            /*
            map.on("click", function (e)
            {
                console.log(e.latlng);
            });


            map.on("dblclick", function (e)
            {
                console.log("doubleClicked");
            });
            */

            /*
            // Add current location to URL hash
            // var hash = new L.Hash(map);
            var marker = L.marker([47.552096, 9.226189]).addTo(map);
            marker
                .bindTooltip("COR Managementsysteme GmbH",
                {
                    permanent: true,
                    direction: 'top'
                    //direction: 'right'
                }
                )
                .bindPopup("<b>COR Managementsysteme GmbH</b><br />Fabrikstrasse 1<br />8586 Erlen/TG<br />+41 (0)71 649 22 46")
                // .openPopup()
                ;
            */
        }

        // initMap();

        window.setTimeout(initMap, 100);

    </script>

</body>
</html>
