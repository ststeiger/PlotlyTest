<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
    <meta charset="utf-8" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

    <meta http-equiv="cache-control" content="max-age=0" />
    <meta http-equiv="cache-control" content="no-cache" />
    <meta http-equiv="expires" content="0" />
    <meta http-equiv="expires" content="Tue, 01 Jan 1980 1:00:00 GMT" />
    <meta http-equiv="pragma" content="no-cache" />

    <title>WikiMaps test</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.00, minimum-scale=1.00, maximum-scale=1.00" />

    <style type="text/css">

        *
        {
            cursor: default !important;
        }

        html, body
        {
            margin: 0px;
            padding: 0px;
            width: 100%;
            height: 100%;
        }

        #swissMap
        {
            /*
            width: 500px;
            height: 500px;
            */
            width: 100%;
            height: 100%;
        }

        #zoom-level
        {
            display: none;
            position: absolute;
            margin: 10px;
            padding: 10px;
            top: 0;
            right: 0;
            z-index: 1000;
            background: #ddd;
        }


        .leaflet-tooltip-top
        {
            margin-top: -19px !important;
        }

        .leaflet-control-attribution
        {
            display: block;
        }


        /*
        .my-div-icon
        {
            display: block;
        }

        
        */

        /*
        .leaflet-popup-content 
        {
            background-color: yellow !important;
        }

        .leaflet-popup-content-wrapper, .leaflet-popup-tip 
        {
            background-color: hotpink !important;
        }
        */


        .leg
        {
            width: 0.5cm;
            height: 0.5cm;
            opacity: 1;
        }

        .legende
        {
            position: absolute;
            display: block;
            right: 0px;
            top: 0px;
            z-index: 999;
            padding: 0.25cm;
            font: 12px/1.5 "Helvetica Neue", Arial, Helvetica, sans-serif;
        }

        .cont
        {
            padding-left: 0.25cm;
            font: 12px/1.5 "Helvetica Neue", Arial, Helvetica, sans-serif;
        }


    </style>

    <!--
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.2.0/dist/leaflet.css"
    integrity="sha512-M2wvCLH6DSRazYeZRIm1JnYyh22purTM+FDB5CsyxtQJYeKq83arPe5wgbNmcFXGqiSH2XR8dT/fJISVA1r/zQ=="
    crossorigin=""/>

    <script src="https://unpkg.com/leaflet@1.2.0/dist/leaflet.js"
    integrity="sha512-lInM/apFSqyy1o6s89K4iQUKg6ppXEgsVxT35HbzUupEVRh2Eu9Wdl4tHj7dZO0s1uvplcYGmt3498TtHq+log=="
    crossorigin=""></script>
    -->

    <!--<link rel="shortcut icon" type="image/png" href="favicon.png" />-->
    <link rel="shortcut icon" type="image/x-icon" href="favicon.ico" />

    <script type="text/javascript" src="Scripts/ea/EasyAjax.js" charset="utf-8"></script>
    <!--
    <link href="Scripts/leaflet/leaflet.css" rel="stylesheet" type="text/css" />
    <script type="text/javascript" src="Scripts/leaflet/leaflet.js?v=1" charset="utf-8"></script>
    -->
    <!--
    <link href="Scripts/leaflet/leaflet_embed.css" rel="stylesheet" type="text/css" />    
    -->
    <link href="Scripts/leaflet/leaflet.css" rel="stylesheet" type="text/css" />
    <script type="text/javascript" src="Scripts/leaflet/leaflet-src.js?v=4" charset="utf-8"></script>
    
</head>
<body>
    <div id="zoom-level">Zoom Level: 18</div>
    <div id="swissMap"></div>


    <div class="legende">
        <table>
            <tr>
                <td class="leg" style="background-color: #FF0000;"></td>
                <td class="cont">Hauptsitz</td>
            </tr>
            <tr>
                <td class="leg" style="background-color: #FF7F00;"></td>
                <td class="cont">Generalagentur</td>
            </tr>
            <tr>
                <td class="leg" style="background-color: #007FFF;"></td>
                <td class="cont">Hauptagentur</td>
            </tr>
            <tr>
                <td class="leg" style="background-color: #00FF00;"></td>
                <td class="cont">Agentur</td>
            </tr>
            <tr>
                <td class="leg" style="background-color: #00FFFF;"></td>
                <td class="cont">Hubs</td>
            </tr>
            <tr>
                <td class="leg" style="background-color: #FFFF00;"></td>
                <td class="cont">Spezial</td>
            </tr>
        </table>
    </div>

    <script type="text/javascript">
        var map = null;


        Math.trunc = Math.trunc || function (x)
        {
            var n = x - x % 1;
            return n === 0 && (x < 0 || (x === 0 && (1 / x !== 1 / 0))) ? -0 : n;
        };
        
        Math.radians = function (degrees)
        {
            return degrees * Math.PI / 180.0;
        };


        // https://gis.stackexchange.com/a/816/3997
        // https://jsfiddle.net/xwaocc00/
        function polygonArea(poly)
        {
            var p1, p2, i;
            var area = 0.0;
            var len = poly.length;


            if (len > 2)
            {

                for (i = 0; i < len; i++)
                {
                    poly[i] = poly[i].map(Math.radians)
                }

                for (i = 0; i < len - 1; i++)
                {
                    p1 = poly[i];
                    p2 = poly[i + 1];
                    
                    area += (p2[0] - p1[0]) *
                        (
                            2
                            + Math.sin(p1[1])
                            + Math.sin(p2[1])
                        );
                }

                // https://en.wikipedia.org/wiki/Earth_radius#Equatorial_radius
                // https://en.wikipedia.org/wiki/Earth_ellipsoid
                // The radius you are using, 6378137.0 m corresponds to the equatorial radius of the Earth.
                var equatorial_radius = 6378137; // m
                var polar_radius = 6356752.3142; // m
                var mean_radius = 6371008.8; // m
                var authalic_radius = 6371007.2; // m (radius of perfect sphere with same surface as reference ellipsoid)
                var volumetric_radius = 6371000.8 // m (radius of a sphere of volume equal to the ellipsoid)
                
                // https://en.wikipedia.org/wiki/Semi-major_and_semi-minor_axes
                // https://en.wikipedia.org/wiki/World_Geodetic_System
                // var a = 6378137; // m
                // var b = 6356752.3142; // m
                // where a and b are, respectively, the equatorial radius and the polar radius.

                // var siteLatitude = poly[0][0]; // geodetic latitude φ
                // var R1 = Math.pow(a * a * Math.cos(siteLatitude), 2) + Math.pow(b * b * Math.sin(siteLatitude), 2)
                // var R2 = Math.pow(a * Math.cos(siteLatitude), 2) + Math.pow(b * Math.sin(siteLatitude), 2);

                // https://en.wikipedia.org/wiki/Earth_radius#Radius_at_a_given_geodetic_latitude
                // Geocentric radius
                // var R = Math.sqrt(R1 / R2);
                // var merid_radius = ((a * a) * (b * b)) / Math.pow(Math.pow(a * Math.cos(siteLatitude), 2) + Math.pow(b * Math.sin(siteLatitude), 2), 3/2)


                // console.log(R);
                // var hrad = polar_radius + (90 - Math.abs(siteLatitude)) / 90 * (equatorial_radius - polar_radius);
                var radius = mean_radius;

                area = area * radius * radius / 2.0;
            } // End if len > 0

            // equatorial_radius: 6391.565558418869 m2
            // mean_radius:       6377.287126172337m2
            // authalic_radius:   6377.283923019292 m2
            // volumetric_radius: 6377.271110415153 m2
            // merid_radius:      6375.314923754325 m2
            // polar_radius:      6348.777989748668 m2
            // R:                 6368.48180842528 m2
            // hrad:              6391.171919886588 m2

            // http://postgis.net/docs/doxygen/2.2/dc/d52/geography__measurement_8c_a1a7c48d59bcf4ed56522ab26c142f61d.html
            // ST_Area(g)               5.21556075001092E-07
            // ST_Area(g, false)     6379.25032051953
            // ST_Area(g, true)      6350.65051177517

            // return area;
            return area.toFixed(2);
        }


        function latLongToString(latlng)
        {
            var x = latlng.lat;
            var y = latlng.lng;
            // console.log("lat: ", latlng.lat, "long: " + latlng.lng);
            // console.log(latlng.lat, ",", latlng.lng);

            var prefix1 = x < 0 ? "S" : "N";
            var prefix2 = y < 0 ? "W" : "E";

            x = Math.abs(x);
            y = Math.abs(y);

            var grad1 = Math.trunc(x);
            x = (x - grad1) * 60;
            var grad2 = Math.trunc(y);
            y = (y - grad2) * 60;

            var min1 = Math.trunc(x);
            var min2 = Math.trunc(y);

            var sec1 = ((x - min1) * 60).toFixed(1);
            var sec2 = ((y - min2) * 60).toFixed(1);

            min1 = (min1 < 10 ? "0" : "") + min1;
            min2 = (min2 < 10 ? "0" : "") + min2;

            sec1 = (sec1 < 10 ? "0" : "") + sec1;
            sec2 = (sec2 < 10 ? "0" : "") + sec2;

            // console.log("Prefix1:", prefix1, "Grad: ", grad1, "Min: ", min1, "sec: ", sec1);
            // console.log("Prefix2:", prefix2, "Grad: ", grad2, "Min: ", min2, "sec: ", sec2);

            var res = grad1 + "°" + min1 + "'" + sec1 + '"' + prefix1 + " " + grad2 + "°" + min2 + "'" + sec2 + '"' + prefix2;
            return res;
        }


        function addMarkers()
        {
            new Http.Json("../ajax/AnySelect.ashx?sql=FMS_Maps_Marker_GB.sql&BE_ID=12435", null)
                .success(
                function (result)
                {
                    // console.log("onSuccess");

                    var table = result.tables[0];
                    // console.log(table.columns);
                    // console.log(table.columns["OBJ_Label"].index);

                    var index_uid = table.columns["OBJ_UID"].index;
                    var index_code = table.columns["OBJT_Code"].index;
                    var index_label = table.columns["OBJ_Label"].index;
                    var index_latitude = table.columns["OBJ_Lat"].index;
                    var index_longitude = table.columns["OBJ_Long"].index;
                    var index_category = table.columns["OBJ_Kategorie"].index;
                    var index_color = table.columns["OBJ_Color"].index;
                    var index_poly = table.columns["OBJ_Polygon"].index;


                    var allCoords = [];

                    
                    // Singapur
                    // table.rows.push(["uid", "code", "label", 1.345733633103394 , 103.83649706840517 ]);
                    


                    
                    for (var i = 0; i < table.rows.length; ++i)
                    {
                        var uid = table.rows[i][index_uid];
                        var code = table.rows[i][index_code];
                        var label = table.rows[i][index_label];
                        var latitude = table.rows[i][index_latitude];
                        var longitude = table.rows[i][index_longitude];
                        var category = table.rows[i][index_category];
                        var color = table.rows[i][index_color];
                        var poly = table.rows[i][index_poly];
                        
                        // console.log(uid);
                        // console.log(code);
                        // console.log(label);
                        // console.log(latitude);
                        // console.log(longitude);
                        // console.log(poly);


                        if (label == null)
                            label = "";

                        label = label.replace(/(?:\r\n|\r|\n)/g, '<br />');
                        // console.log(label);


                        if (latitude == null || longitude == null)
                            continue;


                        allCoords.push([latitude, longitude]);
                        var latlng = L.latLng(latitude, longitude);


                        //var markerHtmlStyles = "background-color: #583470;\n  width: 16px;\n  height: 16px;\n  display: block;\n  left: -8px;\n  top: -8px;\n  position: relative;\n  border-radius: 16px 16px 0;\n transform: rotate(45deg); \n  border: 1px solid #FFFFFF";
                        var markerHtmlStyles = "background-color: #583470;\n  width: 16px;\n  height: 16px;\n  display: block;\n  left: -8px;\n  top: -8px;\n  position: relative;\n  border-radius: 16px 16px 0;\n transform: rotate(45deg); \n  border: 1px solid #FFFFFF";
                        var markerHtmlStyles = "display: block; margin-left: -15px; margin-top: -15px; width: 0; \n  height: 0; \n  border-left: 20px solid transparent;\n  border-right: 20px solid transparent;\n  \n  border-top: 20px solid #f00;\n  ";



                        var greenIcon = L.divIcon({
                            className: "MapElement",
                            // iconAnchor: [0, 24],
                            // labelAnchor: [-6, 0],
                            //popupAnchor: [0, -36],
                            html: "<span style=\"" + markerHtmlStyles + "\" />"
                        });

                        
                        var options = {
                            iconUrl: 'marker-icon.png',
                            iconRetinaUrl: 'marker-icon-2x.png',
                            shadowUrl: 'marker-shadow.png',
                            iconSize: [25, 411],
                            iconAnchor: [12, 41],
                            popupAnchor: [1, -120],
                            tooltipAnchor: [16, -228],
                            shadowSize: [41, 41]
                        };

                        var houseImage = "<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:svg=\"http://www.w3.org/2000/svg\" xml:space=\"preserve\"\n   viewBox=\"0 0 512 512\" width=\"22px\" height=\"22px\">\n<path\n d=\"M256,69.972L50,275.814h42.507v166.214h326.985V275.814H462L256,69.972z M374.492,397.028  h-73.768v-86.495h-89.451v86.495h-73.768V251.99L256,133.587l118.492,118.402V397.028z\"\n  fill=\"{@col1}\" />\n<path\n fill=\"{@col2}\" opacity=\"0.4\" \n d=\"M 137.505,251.99 256,133.587 374.492,251.989 v 145.039 h -73.768 v -86.495 h -89.451 v 86.495 h -73.768 z\" />\n</svg>";

                        var greenIcon = L.divIcon(
                            {
                                className: "customIcon",
                                iconAnchor: [12, 12],
                                // tooltipAnchor: [1120, 0],
                                // labelAnchor: [1120, 0],
                                popupAnchor: [0, 0],
                                //html: "<img src=\"images/icons/gm_SR.png\" />"
                                //html: "<img src=\"images/icons/GB.png\" />"
                                //html: "<img src=\"images/icons/helvetia23.png\" />"
                                html: houseImage.replace("{@col1}", color).replace("{@col2}", color)
                            }
                        );


                        // var marker = L.marker([latitude, longitude]).addTo(map);
                        var marker = L.marker([latitude, longitude], { icon: greenIcon }).addTo(map);


                        
                        var tt = L.tooltip(
                                {
                                    permanent: true,
                                    direction: 'top'
                                    // direction: 'right'
                                    //tooltipAnchor: [1120, 1120]
                                    // , _anchor: [0, -110]
                                }
                            )
                            .setContent(label)
                            ;

                        // marker.bindTooltip(tt);
                        
                        var contentString = "Markierung geklickt<br />Position auf Karte: " + latLongToString(latlng) + "<br />" + "TODO Rico: <br />Öffnen " + code + " " + uid;
                        // contentString = contentString + "<br />Fläche: " + polygonArea(poly) + " m<sup>2</sup>";
                        var popup = new L.Popup()
                            .setLatLng(latlng)
                            .setContent(contentString)
                            //.openOn(map)
                        ;

                        // marker.bindPopup(popup, { offset: L.Point(0, 16) }).addTo(m)
                        marker
                            .bindPopup(popup)
                            .addTo(map)
                            ;

                        marker.on("click", function (e)
                        {
                            // console.log("onclick");
                            
                            map.setView(e.latlng, 18, { animate: true });
                            // marker.popup();

                            var ml = window.parent.document.querySelector('#iMenuLeft');
                            if (ml) ml.contentWindow.Portal.Drawing.navigateTo(uid, function (r) { return r });
                        });


                        // poly = poly.split(',').map( x => x.split(' ')); // f*ck IE 
                        poly = poly.split(',').map(function (x) { return x.split(' ') } );

                        latlng
                        var circle = L.circle(latlng,
                            {
                                color: 'red'
                                , fillColor: '#f03'
                                , fillOpacity: 0.5
                                , radius: 15
                            }
                        ).addTo(map);


                        var polygon = L.polygon(poly);

                        /*
                        polygon.setStyle({
                        fillColor: '#FF00FF'
                        ,fillOpacity: 0.7
                        ,color: 'white'  //Outline color
                        ,weight: 2
                        ,opacity: 1
                        });
                        */

                        polygon
                            .addTo(map)
                            .bindPopup("<b>Hallo</b><br />Ich bin das blaue Gebäude")
                            // .openPopup()
                            ;

                    } // next i 


                    // https://stackoverflow.com/questions/16845614/zoom-to-fit-all-markers-in-mapbox-or-leaflet
                    // var group = new L.featureGroup([marker1, marker2, marker3]);
                    // var group = new L.featureGroup(allCoords);
                    // map.fitBounds(group.getBounds());


                    // console.log(allCoords);
                    var initialBounds = L.latLngBounds(allCoords);
                    // markersLayer.getBounds().getCenter());
                    // console.log(initialBounds);
                    map.fitBounds(initialBounds);

                } // End delegate success
                ).send()
                ;

            // console.log("leaving addMarkers");
        } // End Function addMarkers 


        function bracketDevicePixelRatio()
        {
            var brackets = [1, 1.3, 1.5, 2, 2.6, 3],
                baseRatio = window.devicePixelRatio || 1;
            for (var i = 0; i < brackets.length; i++)
            {
                var scale = brackets[i];
                if (scale >= baseRatio || (baseRatio - scale) < 0.1)
                {
                    return scale;
                }
            }
            return brackets[brackets.length - 1];
        }


        // https://maps.wikimedia.org
        // https://maps.wikimedia.org/main.js
        function initMap()
        {
            // Create a map
            map = L.map('swissMap').setView([47.317390, 8.520293], 18); // SwissRe Soodring 33, Adliswil

            // https://jsfiddle.net/BC7q4/444/
            var southWest = new L.LatLng(45.802216, 5.920721);
            var northEast = new L.LatLng(47.968862, 10.769762);
            var bounds = new L.LatLngBounds(southWest, northEast);

            // https://stackoverflow.com/questions/17187161/bounding-view-of-a-leaflet-image-map-to-a-landscape-viewport
            // http://leafletjs.com/reference-1.2.0.html#map-fitbounds
            var bounds = [[45.802216, 5.920721], [47.968862, 10.769762]];
            // map.fitBounds(bounds, { padding: [] });
            map.fitBounds(bounds, null);


            // scale:
            // Optional scale for the high- resolution screens such as Retina.
            // Supported scales are 1.3, 1.5, 2, 2.6, 3
            var scale = bracketDevicePixelRatio();
            var scalex = (scale === 1) ? '' : ('@' + scale + 'x');

            // Add a map layer
            L.tileLayer("{server}/{style}/{z}/{x}/{y}{scalex}.png",
                {
                    maxZoom: 18
                    , attribution: '<a target="blank" href="https://www.mediawiki.org/wiki/Maps/Technical_Implementation">Wikimedia maps beta</a> | Map data &copy; <a target="blank" href="http://openstreetmap.org/copyright">OpenStreetMap contributors</a>'
                    , server: "https://maps.wikimedia.org"
                    , style: "osm-intl" // "osm" // Map style to use.Use "osm-intl" for map with labels, "osm" for map without labels.
                    , scalex: scalex
                }
            ).addTo(map);
            addMarkers();



            // Add a km/miles scale
            L.control.scale().addTo(map);

            // Update the zoom level label
            map.on('zoomend', function ()
            {
                document.getElementById('zoom-level').innerHTML = 'Zoom Level: ' + map.getZoom();
            });

            /*
            map.on("click", function (e)
            {
                console.log(e.latlng);
            });


            map.on("dblclick", function (e)
            {
                console.log("doubleClicked");
            });
            */

            var coords = [
                [47.3612503, 8.5351944],
                [47.3612252, 8.5342631],
                [47.3610145, 8.5342755],
                [47.3610212, 8.5345227],
                [47.3606405, 8.5345451],
                [47.3606350, 8.5343411],
                [47.3604067, 8.5343545],
                [47.3604120, 8.5345623],
                [47.3604308, 8.5352457],
                [47.3606508, 8.5352328],
                [47.3606413, 8.5348784],
                [47.3610383, 8.5348551],
                [47.3610477, 8.5352063],
                [47.3612503, 8.5351944]
            ];

                            
            var polygon = L.polygon(coords);

            /*
            polygon.setStyle({
            fillColor: '#FF00FF'
            ,fillOpacity: 0.7
            ,color: 'white'  //Outline color
            ,weight: 2
            ,opacity: 1
            });
            */

            polygon
                .addTo(map)
                .bindPopup("<b>Hallo</b><br />Ich bin das blaue SwissRe-Gebäude am Mythenquai")
                // .openPopup()
                ;





            // Add current location to URL hash
            // var hash = new L.Hash(map);
            var marker = L.marker([47.552096, 9.226189]).addTo(map);
            marker
                .bindTooltip("COR Managementsysteme GmbH",
                {
                    permanent: true,
                    direction: 'top'
                    //direction: 'right'
                }
                )
                .bindPopup("<b>COR Managementsysteme GmbH</b><br />Fabrikstrasse 1<br />8586 Erlen/TG<br />+41 (0)71 649 22 46")
               // .openPopup()
                ;

            /*
            var mk = new L.Marker([47.552096, 9.226189], {
                icon: new L.DivIcon({
                    className: 'my-div-icon',
                    html: '<span class="my-div-span">COR</span>'
                    // <img class="my-div-image" src="http://png-3.vector.me/files/images/4/0/402272/aiga_air_transportation_bg_thumb"/>' +
                })
            });
            mk.addTo(map);
            */


            /*

            // mymap = L.map('swissMap').setView([51.505, -0.09], 13); // London
            // mymap = L.map('swissMap').setView([47.317390, 8.520293], 13); // SwissRe Soodring 33, Adliswil
            mymap = L.map('swissMap').setView([47.544411, 9.216229], 13); // Höhenweg 4, 8586 Erlen, Riedt b. Erlen/TG

            var link = "https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token={accessToken}";
            // link = "https://api.mapbox.com/styles/v1/mapbox/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}";
            L.tileLayer(link,
                {
                    attribution: 'Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors, <a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery © <a href="http://mapbox.com">Mapbox</a>'
                    ,maxZoom: 19
                    // https://www.mapbox.com/api-documentation/#maps
                    //,id: 'mapbox.streets'
                    //,id: 'mapbox.satellite',
                    ,id: 'mapbox.streets-satellite'
                    ,accessToken: mytoken // 'your.mapbox.access.token'
                }
            ).addTo(mymap);
            */
            /*
            var marker = L.marker([47.552096, 9.226189]).addTo(mymap);

            var circle = L.circle([47.544411, 9.216229],
                {
                     color: 'red'
                    ,fillColor: '#f03'
                    ,fillOpacity: 0.5
                    ,radius: 50
                }
            ).addTo(mymap);

            marker.bindPopup("<b>COR Managementsysteme GmbH</b><br />Fabrikstrasse 1<br />8586 Erlen/TG<br />+41 (0)71 649 22 46").openPopup();
            */
        }

        initMap();

        // Soodring 33
        // 78134 Adliswil, Switzerland
        // 47.317390, 8.520293



        // window.setTimeout(initMap, 100);

        /*
        function autorun() { initMap(); }
        if (document.addEventListener) document.addEventListener("DOMContentLoaded", autorun, false);
        else if (document.attachEvent) document.attachEvent("onreadystatechange", autorun);
        else window.onload = autorun;



        if (window.addEventListener) window.addEventListener("load", autorun, false);
        else if (window.attachEvent) window.attachEvent("onload", autorun);
        else window.onload = autorun;



        if (document.readyState === "complete")
        {
            autorun();
        }
        else
        {
            document.onreadystatechange = function ()
            {
                console.log("onreadystatechange:", document.readyState);

                // alternative to DOMContentLoaded
                //if (document.readyState === "interactive")
                //{
                //    autorun(); // initApplication();
                //}

                // alternative to load event
                if (document.readyState == "complete")
                {
                    autorun(); // initApplication();
                }

            }
        }
        */

    </script>

</body>
</html>
