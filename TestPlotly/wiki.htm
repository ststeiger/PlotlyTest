<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
    <meta charset="utf-8" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

    <meta http-equiv="cache-control" content="max-age=0" />
    <meta http-equiv="cache-control" content="no-cache" />
    <meta http-equiv="expires" content="0" />
    <meta http-equiv="expires" content="Tue, 01 Jan 1980 1:00:00 GMT" />
    <meta http-equiv="pragma" content="no-cache" />

    <title>WikiMaps test</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.00, minimum-scale=1.00, maximum-scale=1.00" />

    <style type="text/css">
        html, body
        {
            margin: 0px;
            padding: 0px;
            width: 100%;
            height: 100%;
        }

        #swissMap
        {
            /*
            width: 500px;
            height: 500px;
            */
            width: 100%;
            height: 100%;
        }

        #zoom-level
        {
            margin: 10px;
            padding: 10px;
            position: absolute;
            right: 0;
            top: 0;
            z-index: 1000;
            background: #ddd;
            display: none;
        }

        .my-div-icon
        {
            display: block;
        }

        .leaflet-tooltip-top
        {
            margin-top: -19px !important;
        }


        /*
        .leaflet-popup-content 
        {
            background-color: yellow !important;
        }

        .leaflet-popup-content-wrapper, .leaflet-popup-tip 
        {
            background-color: hotpink !important;
        }
        */
    </style>

    <!--
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.2.0/dist/leaflet.css"
    integrity="sha512-M2wvCLH6DSRazYeZRIm1JnYyh22purTM+FDB5CsyxtQJYeKq83arPe5wgbNmcFXGqiSH2XR8dT/fJISVA1r/zQ=="
    crossorigin=""/>

    <script src="https://unpkg.com/leaflet@1.2.0/dist/leaflet.js"
    integrity="sha512-lInM/apFSqyy1o6s89K4iQUKg6ppXEgsVxT35HbzUupEVRh2Eu9Wdl4tHj7dZO0s1uvplcYGmt3498TtHq+log=="
    crossorigin=""></script>
    -->

    <!--<link rel="shortcut icon" type="image/png" href="favicon.png" />-->
    <link rel="shortcut icon" type="image/x-icon" href="favicon.ico" />

    <script type="text/javascript" src="Scripts/ea/EasyAjax.js" charset="utf-8"></script>
    <link href="Scripts/leaflet/leaflet.css" rel="stylesheet" type="text/css" />
    <script type="text/javascript" src="Scripts/leaflet/leaflet.js?v=1" charset="utf-8"></script>
    <!--
    <link href="Scripts/leaflet/leaflet_embed.css" rel="stylesheet" type="text/css" />
    <script type="text/javascript" src="Scripts/leaflet/leaflet-src.js" charset="utf-8"></script>
    -->
</head>
<body>
    <div id="zoom-level">Zoom Level: 18</div>
    <div id="swissMap"></div>

    <script type="text/javascript">
        var map = null;

        
        Math.radians = function (degrees)
        {
            return degrees * Math.PI / 180.0;
        };


        // https://gis.stackexchange.com/a/816/3997
        function polygonArea()
        {
            var poly = [
                [47.3612503, 8.5351944],
                [47.3612252, 8.5342631],
                [47.3610145, 8.5342755],
                [47.3610212, 8.5345227],
                [47.3606405, 8.5345451],
                [47.3606350, 8.5343411],
                [47.3604067, 8.5343545],
                [47.3604120, 8.5345623],
                [47.3604308, 8.5352457],
                [47.3606508, 8.5352328],
                [47.3606413, 8.5348784],
                [47.3610383, 8.5348551],
                [47.3610477, 8.5352063],
                [47.3612503, 8.5351944]
            ];


            var area = 0.0;
            var len = poly.length;

            if (len > 2)
            {

                var p1, p2;

                for (var i = 0; i < len - 1; i++)
                {

                    p1 = poly[i];
                    p2 = poly[i + 1];

                    area += Math.radians(p2[0] - p1[0]) *
                        (
                            2
                            + Math.sin(Math.radians(p1[1]))
                            + Math.sin(Math.radians(p2[1]))
                        );
                }

                // https://en.wikipedia.org/wiki/Earth_radius#Equatorial_radius
                // https://en.wikipedia.org/wiki/Earth_ellipsoid
                // The radius you are using, 6378137.0 m corresponds to the equatorial radius of the Earth.
                var equatorial_radius = 6378137; // m
                var polar_radius = 6356752.3142; // m
                var mean_radius = 6371008.8; // m
                var authalic_radius = 6371007.2; // m (radius of perfect sphere with same surface as reference ellipsoid)
                var volumetric_radius = 6371000.8 // m (radius of a sphere of volume equal to the ellipsoid)
                // geodetic latitude φ
                var siteLatitude = Math.radians(poly[0][0]);


                // https://en.wikipedia.org/wiki/Semi-major_and_semi-minor_axes
                // https://en.wikipedia.org/wiki/World_Geodetic_System
                var a = 6378137; // m
                var b = 6356752.3142; // m
                // where a and b are, respectively, the equatorial radius and the polar radius.

                var R1 = Math.pow(a * a * Math.cos(siteLatitude), 2) + Math.pow(b * b * Math.sin(siteLatitude), 2)
                var R2 = Math.pow(a * Math.cos(siteLatitude), 2) + Math.pow(b * Math.sin(siteLatitude), 2);

                // https://en.wikipedia.org/wiki/Earth_radius#Radius_at_a_given_geodetic_latitude
                // Geocentric radius
                var R = Math.sqrt(R1 / R2);
                // var merid_radius = ((a * a) * (b * b)) / Math.pow(Math.pow(a * Math.cos(siteLatitude), 2) + Math.pow(b * Math.sin(siteLatitude), 2), 3/2)



                // console.log(R);
                // var hrad = polar_radius + (90 - Math.abs(siteLatitude)) / 90 * (equatorial_radius - polar_radius);
                var radius = mean_radius;

                area = area * radius * radius / 2.0;
            } // End if len > 0

            // equatorial_radius: 6391.565558418869 m2
            // mean_radius:       6377.287126172337m2
            // authalic_radius:   6377.283923019292 m2
            // volumetric_radius: 6377.271110415153 m2
            // merid_radius:      6375.314923754325 m2
            // polar_radius:      6348.777989748668 m2
            // R:                 6368.48180842528 m2
            // hrad:              6391.171919886588 m2

            // http://postgis.net/docs/doxygen/2.2/dc/d52/geography__measurement_8c_a1a7c48d59bcf4ed56522ab26c142f61d.html
            // ST_Area(false)     6379.25032051953
            // ST_Area(true)      6350.65051177517

            // return area;
            return area.toFixed(2);
        }


        function latLongToString(latlng)
        {
            var x = latlng.lat;
            var y = latlng.lng;
            // console.log("lat: ", latlng.lat, "long: " + latlng.lng);
            // console.log(latlng.lat, ",", latlng.lng);

            var prefix1 = x < 0 ? "S" : "N";
            var prefix2 = y < 0 ? "W" : "E";

            x = Math.abs(x);
            y = Math.abs(y);

            var grad1 = Math.trunc(x);
            x = (x - grad1) * 60;
            var grad2 = Math.trunc(y);
            y = (y - grad2) * 60;

            var min1 = Math.trunc(x);
            var min2 = Math.trunc(y);

            var sec1 = ((x - min1) * 60).toFixed(1);
            var sec2 = ((y - min2) * 60).toFixed(1);

            min1 = (min1 < 10 ? "0" : "") + min1;
            min2 = (min2 < 10 ? "0" : "") + min2;

            sec1 = (sec1 < 10 ? "0" : "") + sec1;
            sec2 = (sec2 < 10 ? "0" : "") + sec2;

            // console.log("Prefix1:", prefix1, "Grad: ", grad1, "Min: ", min1, "sec: ", sec1);
            // console.log("Prefix2:", prefix2, "Grad: ", grad2, "Min: ", min2, "sec: ", sec2);

            var res = grad1 + "°" + min1 + "'" + sec1 + '"' + prefix1 + " " + grad2 + "°" + min2 + "'" + sec2 + '"' + prefix2;
            return res;
        }


        function onMarkerClick(e, open_args) 
        {
            // console.log(open_args);

            var popup = L.popup();
            //console.log("onMarkerClick");
            //console.log(e);
            //console.log(arguments);
            //console.log("UID:");
            //console.log(uid);

            //popup
            //    .setLatLng(e.latlng)
            //    .setContent("You clicked the map at " + e.latlng.toString())
            //    .openOn(mymap);


            // console.log(e.latlng.toString());
            // 10.5^2: 10°30'00.0"N 10°30'00.0"E
            //console.log(latLongToString(e.latlng));

            popup
                .setLatLng(e.latlng)
                .setContent("Markierung geklickt<br />Position auf Karte: " + latLongToString(e.latlng) + "<br />" + "TODO Rico: <br />Öffnen " + open_args.objt + " " + open_args.uid)
                .openOn(map);
        }


        function addMarkers()
        {
            new Http.Json("ajax/mapMarker.ashx", null)
                .success(
                function (result)
                {
                    // console.log("onSuccess");

                    var table = result.tables[0];
                    // console.log(table.columns);
                    // console.log(table.columns["OBJ_Label"].index);

                    var index_uid = table.columns["OBJ_UID"].index;
                    var index_code = table.columns["OBJT_Code"].index;
                    var index_label = table.columns["OBJ_Label"].index;
                    var index_latitude = table.columns["OBJ_Lat"].index;
                    var index_longitude = table.columns["OBJ_Long"].index;

                    for (var i = 0; i < table.rows.length; ++i)
                    {
                        var uid = table.rows[i][index_uid];
                        var code = table.rows[i][index_code];
                        var label = table.rows[i][index_label];
                        var latitude = table.rows[i][index_latitude];
                        var longitude = table.rows[i][index_longitude];

                        // console.log(uid);
                        // console.log(code);
                        // console.log(label);
                        // console.log(latitude);
                        // console.log(longitude);

                        if (latitude == null || longitude == null)
                            continue;

                        var marker = L.marker([latitude, longitude]).addTo(map);

                        if (label != null)
                        {
                            label = label.replace(/(?:\r\n|\r|\n)/g, '<br />');

                            marker.bindTooltip(label,
                                {
                                    permanent: true,
                                    direction: 'top'
                                    //direction: 'right'
                                }
                            ).bindPopup(label);

                            marker.on("click", function (e)
                            {
                                var open_args = {
                                     "uid": uid
                                    ,"objt": code
                                    ,"label": label
                                    ,"latitude": latitude
                                    ,"longitude": longitude
                                };

                                onMarkerClick(e, open_args);
                            });

                        } // End if (label != null) 

                    } // next i 

                } // End delegate success
                ).send()
                ;

            // console.log("leaving addMarkers");
        } // End Function addMarkers 


        function bracketDevicePixelRatio()
        {
            var brackets = [1, 1.3, 1.5, 2, 2.6, 3],
                baseRatio = window.devicePixelRatio || 1;
            for (var i = 0; i < brackets.length; i++)
            {
                var scale = brackets[i];
                if (scale >= baseRatio || (baseRatio - scale) < 0.1)
                {
                    return scale;
                }
            }
            return brackets[brackets.length - 1];
        }

        // https://maps.wikimedia.org
        // https://maps.wikimedia.org/main.js
        function initMap()
        {
            // Create a map
            map = L.map('swissMap').setView([47.317390, 8.520293], 18); // SwissRe Soodring 33, Adliswil

            // https://jsfiddle.net/BC7q4/444/
            var southWest = new L.LatLng(45.802216, 5.920721);
            var northEast = new L.LatLng(47.968862, 10.769762);
            var bounds = new L.LatLngBounds(southWest, northEast);

            // https://stackoverflow.com/questions/17187161/bounding-view-of-a-leaflet-image-map-to-a-landscape-viewport
            // http://leafletjs.com/reference-1.2.0.html#map-fitbounds
            var bounds = [[45.802216, 5.920721], [47.968862, 10.769762]];
            // map.fitBounds(bounds, { padding: [] });
            map.fitBounds(bounds, null);


            // scale:
            // Optional scale for the high- resolution screens such as Retina.
            // Supported scales are 1.3, 1.5, 2, 2.6, 3
            var scale = bracketDevicePixelRatio();
            var scalex = (scale === 1) ? '' : ('@' + scale + 'x');

            // Add a map layer
            L.tileLayer("{server}/{style}/{z}/{x}/{y}{scalex}.png",
                {
                    maxZoom: 18
                    , attribution: '<a target="blank" href="https://www.mediawiki.org/wiki/Maps/Technical_Implementation">Wikimedia maps beta</a> | Map data &copy; <a target="blank" href="http://openstreetmap.org/copyright">OpenStreetMap contributors</a>'
                    , server: "https://maps.wikimedia.org"
                    , style: "osm-intl" // "osm" // Map style to use.Use "osm-intl" for map with labels, "osm" for map without labels.
                    , scalex: scalex
                }
            ).addTo(map);
            addMarkers();



            // Add a km/miles scale
            L.control.scale().addTo(map);

            // Update the zoom level label
            map.on('zoomend', function ()
            {
                document.getElementById('zoom-level').innerHTML = 'Zoom Level: ' + map.getZoom();
            });


            map.on("click", function (e)
            {
                var open_args = {
                    "uid": "uid"
                    , "objt": "code"
                    , "label": "label"
                    , "latitude": "latitude"
                    , "longitude": "longitude"
                };

                onMarkerClick(e, open_args);
            });


            map.on("dblclick", function (e)
                {
                    alert("doubleClicked");
                }
            );


                            
            var polygon = L.polygon([
            [47.3612503, 8.5351944],
                [47.3612252, 8.5342631],
                [47.3610145, 8.5342755],
                [47.3610212, 8.5345227],
                [47.3606405, 8.5345451],
                [47.3606350, 8.5343411],
                [47.3604067, 8.5343545],
                [47.3604120, 8.5345623],
                [47.3604308, 8.5352457],
                [47.3606508, 8.5352328],
                [47.3606413, 8.5348784],
                [47.3610383, 8.5348551],
                [47.3610477, 8.5352063],
                [47.3612503, 8.5351944]
            ]);

            /*
            polygon.setStyle({
            fillColor: '#FF00FF'
            ,fillOpacity: 0.7
            ,color: 'white'  //Outline color
            ,weight: 2
            ,opacity: 1
            });
            */

            polygon
                .addTo(map)
                .bindPopup("<b>Hallo</b><br />Ich bin das blaue SwissRe-Gebäude am Mythenquai mit einer Fläche von " + polygonArea() + " m<sup>2</sup>")
                .openPopup()
                ;





            // Add current location to URL hash
            // var hash = new L.Hash(map);
            var marker = L.marker([47.552096, 9.226189]).addTo(map);
            marker
                .bindTooltip("COR Managementsysteme GmbH",
                {
                    permanent: true,
                    direction: 'top'
                    //direction: 'right'
                }
                )
                .bindPopup("<b>COR Managementsysteme GmbH</b><br />Fabrikstrasse 1<br />8586 Erlen/TG<br />+41 (0)71 649 22 46")
               // .openPopup()
                ;

            /*
            var mk = new L.Marker([47.552096, 9.226189], {
                icon: new L.DivIcon({
                    className: 'my-div-icon',
                    html: '<span class="my-div-span">COR</span>'
                    // <img class="my-div-image" src="http://png-3.vector.me/files/images/4/0/402272/aiga_air_transportation_bg_thumb"/>' +
                })
            });
            mk.addTo(map);
            */


            /*

            // mymap = L.map('swissMap').setView([51.505, -0.09], 13); // London
            // mymap = L.map('swissMap').setView([47.317390, 8.520293], 13); // SwissRe Soodring 33, Adliswil
            mymap = L.map('swissMap').setView([47.544411, 9.216229], 13); // Höhenweg 4, 8586 Erlen, Riedt b. Erlen/TG

            var link = "https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token={accessToken}";
            // link = "https://api.mapbox.com/styles/v1/mapbox/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}";
            L.tileLayer(link,
                {
                    attribution: 'Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors, <a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery © <a href="http://mapbox.com">Mapbox</a>'
                    ,maxZoom: 19
                    // https://www.mapbox.com/api-documentation/#maps
                    //,id: 'mapbox.streets'
                    //,id: 'mapbox.satellite',
                    ,id: 'mapbox.streets-satellite'
                    ,accessToken: mytoken // 'your.mapbox.access.token'
                }
            ).addTo(mymap);
            */
            /*
            var marker = L.marker([47.552096, 9.226189]).addTo(mymap);

            var circle = L.circle([47.544411, 9.216229],
                {
                     color: 'red'
                    ,fillColor: '#f03'
                    ,fillOpacity: 0.5
                    ,radius: 50
                }
            ).addTo(mymap);

            marker.bindPopup("<b>COR Managementsysteme GmbH</b><br />Fabrikstrasse 1<br />8586 Erlen/TG<br />+41 (0)71 649 22 46").openPopup();
            */
        }

        initMap();

        // Soodring 33
        // 78134 Adliswil, Switzerland
        // 47.317390, 8.520293



        // window.setTimeout(initMap, 100);

        /*
        function autorun() { initMap(); }
        if (document.addEventListener) document.addEventListener("DOMContentLoaded", autorun, false);
        else if (document.attachEvent) document.attachEvent("onreadystatechange", autorun);
        else window.onload = autorun;



        if (window.addEventListener) window.addEventListener("load", autorun, false);
        else if (window.attachEvent) window.attachEvent("onload", autorun);
        else window.onload = autorun;



        if (document.readyState === "complete")
        {
            autorun();
        }
        else
        {
            document.onreadystatechange = function ()
            {
                console.log("onreadystatechange:", document.readyState);

                // alternative to DOMContentLoaded
                //if (document.readyState === "interactive")
                //{
                //    autorun(); // initApplication();
                //}

                // alternative to load event
                if (document.readyState == "complete")
                {
                    autorun(); // initApplication();
                }

            }
        }
        */

    </script>

</body>
</html>
