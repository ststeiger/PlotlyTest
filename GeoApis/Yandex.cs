// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using GeoApis.Yandex;
//
//    var rootNode = RootNode.FromJson(jsonString);

namespace GeoApis.Yandex
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class RootNode
    {
        [JsonProperty("response")]
        public Response Response { get; set; }
    }

    public partial class Response
    {
        [JsonProperty("GeoObjectCollection")]
        public GeoObjectCollection GeoObjectCollection { get; set; }
    }

    public partial class GeoObjectCollection
    {
        [JsonProperty("metaDataProperty")]
        public GeoObjectCollectionMetaDataProperty MetaDataProperty { get; set; }

        [JsonProperty("featureMember")]
        public List<FeatureMember> FeatureMember { get; set; }
    }

    public partial class FeatureMember
    {
        [JsonProperty("GeoObject")]
        public GeoObject GeoObject { get; set; }
    }

    public partial class GeoObject
    {
        [JsonProperty("metaDataProperty")]
        public GeoObjectMetaDataProperty MetaDataProperty { get; set; }

        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("boundedBy")]
        public BoundedBy BoundedBy { get; set; }

        [JsonProperty("Point")]
        public Point Point { get; set; }
    }

    public partial class BoundedBy
    {
        [JsonProperty("Envelope")]
        public Envelope Envelope { get; set; }
    }

    public partial class Envelope
    {
        [JsonProperty("lowerCorner")]
        public string LowerCorner { get; set; }

        [JsonProperty("upperCorner")]
        public string UpperCorner { get; set; }
    }

    public partial class GeoObjectMetaDataProperty
    {
        [JsonProperty("GeocoderMetaData")]
        public GeocoderMetaData GeocoderMetaData { get; set; }
    }

    public partial class GeocoderMetaData
    {
        [JsonProperty("kind")]
        public string Kind { get; set; }

        [JsonProperty("text")]
        public string Text { get; set; }

        [JsonProperty("precision")]
        public string Precision { get; set; }

        [JsonProperty("Address")]
        public Address Address { get; set; }

        [JsonProperty("AddressDetails")]
        public AddressDetails AddressDetails { get; set; }
    }

    public partial class Address
    {
        [JsonProperty("country_code")]
        public string CountryCode { get; set; }

        [JsonProperty("postal_code")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long PostalCode { get; set; }

        [JsonProperty("formatted")]
        public string Formatted { get; set; }

        [JsonProperty("Components")]
        public List<Component> Components { get; set; }
    }

    public partial class Component
    {
        [JsonProperty("kind")]
        public string Kind { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }
    }

    public partial class AddressDetails
    {
        [JsonProperty("Country")]
        public Country Country { get; set; }
    }

    public partial class Country
    {
        [JsonProperty("AddressLine")]
        public string AddressLine { get; set; }

        [JsonProperty("CountryNameCode")]
        public string CountryNameCode { get; set; }

        [JsonProperty("CountryName")]
        public string CountryName { get; set; }

        [JsonProperty("AdministrativeArea")]
        public AdministrativeArea AdministrativeArea { get; set; }
    }

    public partial class AdministrativeArea
    {
        [JsonProperty("AdministrativeAreaName")]
        public string AdministrativeAreaName { get; set; }

        [JsonProperty("Locality")]
        public Locality Locality { get; set; }
    }

    public partial class Locality
    {
        [JsonProperty("LocalityName")]
        public string LocalityName { get; set; }

        [JsonProperty("Thoroughfare")]
        public Thoroughfare Thoroughfare { get; set; }
    }

    public partial class Thoroughfare
    {
        [JsonProperty("ThoroughfareName")]
        public string ThoroughfareName { get; set; }

        [JsonProperty("Premise")]
        public Premise Premise { get; set; }
    }

    public partial class Premise
    {
        [JsonProperty("PremiseNumber")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long PremiseNumber { get; set; }

        [JsonProperty("PostalCode")]
        public PostalCode PostalCode { get; set; }
    }

    public partial class PostalCode
    {
        [JsonProperty("PostalCodeNumber")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long PostalCodeNumber { get; set; }
    }

    public partial class Point
    {
        protected decimal m_latitude;
        protected decimal m_longitude;
        protected string m_pos;


        [JsonProperty("pos")]
        public string Pos
        {
            get { return this.m_pos; }
            set
            {
                if (value == null)
                    return;

                this.m_pos = value;

                string[] values = value.Split(' ');
                if (values.Length < 2)
                    return;

                decimal.TryParse(values[0], out this.m_longitude);
                decimal.TryParse(values[1], out this.m_latitude);
            }
        }


        public string GoogleCoords
        {
            get
            {
                return this.m_latitude.ToString(System.Globalization.CultureInfo.InvariantCulture) 
                    + ", " 
                    + this.m_longitude.ToString(System.Globalization.CultureInfo.InvariantCulture);
            }
        }


        public decimal Latitude
        {
            get
            {
                return this.m_latitude;
            }
        }


        public decimal Longitude
        {
            get
            {
                return this.m_longitude;
            }
        }
    }

    public partial class GeoObjectCollectionMetaDataProperty
    {
        [JsonProperty("GeocoderResponseMetaData")]
        public GeocoderResponseMetaData GeocoderResponseMetaData { get; set; }
    }

    public partial class GeocoderResponseMetaData
    {
        [JsonProperty("request")]
        public string Request { get; set; }

        [JsonProperty("found")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Found { get; set; }

        [JsonProperty("results")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Results { get; set; }
    }

    public partial class RootNode
    {
        public static RootNode FromJson(string json)
        {
            return JsonConvert.DeserializeObject<RootNode>(json, GeoApis.Yandex.Converter.Settings);
        }
    }

    public static class Serialize
    {
        public static string ToJson(this RootNode self)
        {
            return JsonConvert.SerializeObject(self, GeoApis.Yandex.Converter.Settings);
        }
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t)
        {
            return t == typeof(long) || t == typeof(long?);
        }

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
